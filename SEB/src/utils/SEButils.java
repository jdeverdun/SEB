package utils;

import java.io.BufferedWriter;
import java.io.File;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;

import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

import models.Tube;

import params.SystemParams;
import params.WindowManager;

public class SEButils {
	public static final String SAVE_PARAM_SEPARATOR = "@@";
	public static final String SAVE_NAME_PARAM_SEPARATOR = "==";
	public static final String SAVE_LINK_SEPARATOR = "-->";
	public static final String SAVE_PARAM_VALUE_SEPARATOR = ":";
	public static final String SAVE_COMMENT_CHAR = "#";
	public static final String FILE_EXTENSION = ".seb";

	public final static Charset ENCODING = StandardCharsets.UTF_8;
	private static String NEWLINE_CHAR = "\n";

	public static void saveModel(){
		if(WindowManager.MAINWINDOW.getGraphicalModelPanel().getFirstArteryFrame() == null){
			SystemParams.errordlg("No first artery ...");
			return;
		}
		JFileChooser fc = new JFileChooser();
		fc.setFileSelectionMode( JFileChooser.FILES_ONLY );

		File selectedFile = null;
		if( fc.showOpenDialog( WindowManager.MAINWINDOW ) == JFileChooser.APPROVE_OPTION )
		{
			selectedFile = fc.getSelectedFile();
		}else{
			return;
		}
		if(!selectedFile.toString().endsWith(FILE_EXTENSION))
			selectedFile = new File(selectedFile + FILE_EXTENSION);
		
		HashMap<String, String> paramsByTube = new HashMap<String,String>();
		HashSet<String> links = new HashSet<String>();
		// on recupere les infos de facon recursive a partir de first artery
		WindowManager.MAINWINDOW.getGraphicalModelPanel().getFirstArteryFrame().getTubePanel().saveInfoTo(paramsByTube,links);
		// on integre le LCR
		WindowManager.MAINWINDOW.getGraphicalModelPanel().getVentricleleftFrame().getTubePanel().saveInfoTo(paramsByTube,links);
		WindowManager.MAINWINDOW.getGraphicalModelPanel().getVentriclerightFrame().getTubePanel().saveInfoTo(paramsByTube,links);

		// on ecrit dans le fichier
		DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
		Date date = new Date();
		ArrayList<String> content = new ArrayList<String>();
		content.add(SAVE_COMMENT_CHAR +" File generated by "+SystemParams.PROGRAM_NAME+" Version : "+SystemParams.VERSION+"") ;
		content.add(SAVE_COMMENT_CHAR+" Date : "+dateFormat.format(date)+"");
		// on ajoute la valeur du compteur des tubes
		content.add(Tube.ID_LABEL+SAVE_NAME_PARAM_SEPARATOR+Tube.ID);
		for(String key:paramsByTube.keySet())
			content.add(key+SAVE_NAME_PARAM_SEPARATOR+paramsByTube.get(key));
		content.add(SAVE_COMMENT_CHAR+" Now the links");
		for(String link:links)
			content.add(link);
		try {
			writeLargerTextFile(selectedFile,content);
		} catch (IOException e) {
			SystemParams.errordlg("Error while saving file ["+e.toString()+"]");
			return;
		}
	}

	public static void writeLargerTextFile(File file, List<String> aLines) throws IOException {
		Path path = file.toPath();
		try (BufferedWriter writer = Files.newBufferedWriter(path, ENCODING)){
			for(String line : aLines){
				writer.write(line);
				writer.newLine();
			}
		}
	}
	
	public static void loadModel(){
		JFileChooser fc = new JFileChooser();
		FileFilter sebFilter = new FileNameExtensionFilter("SEB models", FILE_EXTENSION.substring(1), "txt");
		fc.setFileSelectionMode( JFileChooser.FILES_ONLY );
		fc.addChoosableFileFilter(sebFilter);
		fc.setFileFilter(sebFilter);
		fc.setAcceptAllFileFilterUsed(false);
		File selectedFile = null;
		if( fc.showOpenDialog( WindowManager.MAINWINDOW ) == JFileChooser.APPROVE_OPTION )
		{
			selectedFile = fc.getSelectedFile();
		}else{
			return;
		}
	}
}
